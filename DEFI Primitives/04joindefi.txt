# MetaMask Wallet
In this fourth module, we'll talk about joining the world of DeFi. I've got two components. Number one is to set up your wallet, and I'll go through step-by-step how to do that. Then the second part, which is much more involved and longer, is to bring you up to speed with what I call the blockchain tech big picture. I will go through a list of different items that are important to understand within this space. For example, we're going to show how to set up an address in Ethereum. But where does that address come from? It's very important in this learning experience that you understand where stuff actually comes from, that's my job, and we will go into considerable detail. Let's start with the MetaMask wallet. This is something that is very easy to download, this is a wallet. What is a wallet? Well, a wallet is a place that you store your private keys. This is going to be a mechanism also whereby we can interact with the various different profile in decentralized finance. This is a very important starting point. I will go through how to do this on a mobile phone, but you could also do this on a desktop, so there are different ways to actually do this. Of course, you can have more than one version of this. Just like you can have two passes or two wallets, you can have two MetaMask wallets, I actually have two. Let's go through, what we're going to do. The first thing, go to the App Store or the Google Play Store and download, MetaMask. Click Get Started, Create new wallet, and you're going to create a new account by putting in a password. You choose that, you don't actually have to give information about you in detail. It's not like establishing a bank account or a brokerage account where you've got to give a lot of private information, no, this is very straightforward to do. One important thing will be a secret backup phrase. You'll be prompted to actually do that, and I highly recommend that you put that somewhere that is not on a computer. This is something that effectively somebody could use to essentially steal your private keys. That seed phrase is very important to keep that outside of the Internet in particular. You actually put that in and you're going to see an interface, something like this and I'll go through a few of these things. number 1, there's a network and the default is Ethereum Main Network, sometimes called the Main Net. If you're new to DeFi, you're going to have zero balance. You just set this wallet up, there is nothing there. We're going to talk not just about the main network, but we're also going to talk about a test network called the Ropsten Test Network, and most of the stuff that we do in my course is based upon the test network. The test network is an identical copy of the real main net. Any contract that works on the test network must work on the main network. But it's a great way to operate on the test net where the Ethereum has no value, and you can basically kick the tires, try to find bugs, and operate in this test net.
Play video starting at :4:50 and follow transcript4:50
The main network is where Ethereum, all of the smart contracts that are operational, the world that defy, exist mainly on Ethereum. I've emphasized that there are other blockchains that are available today that are operating decentralized finance apps, so that's clear, but most of them are based upon Ethereum. That's the network. Again, this test network is extremely useful in terms of what we do. I'd mentioned that I create a token in my course. Well, this token is created on the test network. The token creation code, that smart contract, could be deployed to the mainnet. But the advantage of the testnet is that there's no gas or no fees, and everybody, as I'll show you, can get Ether for free. On the testnet, it doesn't have any value, but you can get it from a faucet, and that's exactly what we're going to do in setting you up. Number 2 that is in red, that is basically telling your account. That's your Ethereum public address. We'll talk about this in considerable detail in a few minutes where that actually comes from. Balance and just setting up this wallet. The balance here is zero but it might not be zero if you've actually put something into your MetaMask wallet.
Play video starting at :6:37 and follow transcript6:37
What we can do here is if we want to check the balance, we can do transfers, many different possibilities using this particular wallet. There's also a possibility here that you've got some Ethereum in another wallet that you want to transfer to your MetaMask wallet. The app allows you to do this in a very straightforward way, so you can literally receive. The transaction history is also available in the wallet, and this is where you can see a pending transaction. When you do a transaction, it will be pending. Remember, we talked about the memory pool, so it'll be pending until it's approved and goes into the blockchain, which would be the testnet blockchain in this particular example if you're using the Ropsten testnet. This is what it looks like in terms of an actual transaction. We need to get some test Ethereum into our wallet. You'll see for any transaction, you've got the confirm or reject. You might type something in incorrectly, it would reject it, but if you want to do this, you would hit "Confirm." It calculates the gas fees. Everything is within this particular wallet, so it's very nice to do. The next thing is we need to get some test Ether. We're going to open the MetaMask wallet. We're going to switch to the testnet, and then basically click on the amount of Ether you have, which is zero, and then we're going to click "Receive." You're going to copy your public address, that's step number 5. Then we're going to go to a website , so the faucet.ropsten.be. You're going to paste your address in and basically send me some Ether. Don't do this a lot. Do it for a modest amount. If you just keep on doing this, then you're taking advantage of the system. Indeed, you might be blocked for a while, and you don't need that much to start things off. Basically, you can close this up once you're done. Then you can look at the status and will be used as Etherscan. Again, this system is completely transparent. Every single transaction in the entire history of Ethereum, is captured in Etherscan, both what is in the actual system and what is pending in the system. You can see, you can wait until it's actually confirmed. Then when you go back to your wallet, you will see that your wallet has got these Test ETH in them. This is a great exercise to start things off, to get in to the world of ETH. If you've got a friend that's interested, they should do the same thing, take the same steps. What I would like you to do, is to do a transfer. To send some of your Test ETH to your friend. To do that, you will need their public address. You should share public addresses, then send something to your friend and your friend can send something to you back. This is, again, fairly straightforward, if there's issues look to YouTube videos on this. But this is your ticket to get into this space. Even though you're playing on the Testnet, this is 100 percent rock-solid wallet that can be used for real Ethereum transactions and any other ERC-20 Token. My Ethereum MetaMask wallet, it's got Ethereum in it, it's got USDC, it's got [inaudible], it's got many tokens that I have in my wallet. It's very general. In terms of troubleshooting, there's a few things, you would do the entire thing on a desktop or so, or a laptop. Again, I've got different accounts or different wallets based upon the machine that I actually have. Indeed, if you do that, if you set up a separate account which you can, on a desktop, then you can do the transfer from your mobile to your desktop and vice versa. That's a good exercise to do. It's also possible to import from one wallet to the other. What if you forget your password in MetaMask? The MetaMask password can be a pretty simple password, doesn't have to be as strong password. But if you forget your password, then you can basically recover everything by importing the seed phrase. That's why it's really important not to loose that seed phrase.
Play video starting at :13:5 and follow transcript13:05
Then maybe the last thing that I'll mention is, what happens if you forget your password and forget your seed phrase? Well, that's very bad news. Because that means you've lost whatever it was in your wallet. Now, if you only have an account with ETH in the Testnet, then you've lost nothing, because you can just go and do the whole process again. However, if you've got real ETH and ERC-20 Tokens, you lose your password, you lose your backup seed phrase, you've lost your private key.
Play video starting at :13:50 and follow transcript13:50
That gets you into the world of, if I do this, try to do some transfers and this is the only way that you'll really understand what's going on, I can push some slides, you can listen to me, you can do the quiz questions, but you need to be actually involved in the space, you need to have a wallet. Before my students get into my course, a pre assignment is to set up a wallet and to load in some Test ETH into that wallet. Because we use that wallet throughout the course. You have to do it. I think it's very important. This is the way to join the world of ETH.

# ases and keys
Okay, so the second part of joining the world of DeFi is to really understand some of the big picture in terms of the technology, in terms of the crypto space. So I'll go through a number of concepts and at a fairly high level to give you an idea of what is actually going on. So for example we talked about cryptographic hashes to some degree. We talked about keys, we've talked about addresses, I'm going to layer on a little more detail which I think is important for you to understand. So we started very early on to talk about a hash. So I want to make sure that you understand in the first course, we talked about SHA- 256 hash which is used in Bitcoin and that takes an arbitrary size input. And the Output is 256 bits or 64 hexadecimal characters, ethereum used the Keccak-256 and that is a basically in the SHA-3 family. So it's a more advanced hashing algorithm. These are cryptographic functions but they're not encryption, they're one way functions. Okay, so this is really important if somebody says that a hash is encrypting a document, they don't understand the basics, and you need to understand the basics. So this is a one way function, it's not meant to be undone and it plays a very important role and all of these blockchain protocols. So hashing function is number one. So cryptography is important in terms of what we do in particular in terms of the private and public keys. So, this field is actually broken into two branches, so cryptology is the general area, cryptography is what we focus on. And that's basically the science of making stuff secret, so your private key is secret. Crypt analysis is kind of the reverse, so that is decrypting stuff and we don't really talk about that in this course. It's a cryptography that is the most important and it makes the blockchain technology that underlies the theory very powerful.
Play video starting at :2:56 and follow transcript2:56
So in terms of cryptography there's two different types of cryptography at a very high level, and one is symmetric key and the other is asymmetric. So let me tell you briefly what that means. So think about encrypting a document so it might be like an adobe pdf,were your password protect that document. And then you send that document to somebody, and then somehow let them know what the decryption key actually is the password.
Play video starting at :3:37 and follow transcript3:37
Okay so that is an example of symmetric key cryptography. So it's the same key that's used to encrypt and decript.
Play video starting at :3:48 and follow transcript3:48
However most of what we do in blockchain technology has to do with asymmetric key cryptography. Okay so, think of a private key and a public key and the public key is mathematically linked to the private key. The private key is a random number. The public key is derived mathematically but is derived in a way that makes it really difficult to go from the public key to the private key but it's really easy to go from the private key to the public. Okay so, the methods that we use to do that, are called elliptic curve cryptography or ECC, and when we talk about signatures we're going to be using elliptic curve cryptography or so.
Play video starting at :4:42 and follow transcript4:42
Okay so, let's kind of give some examples of this, so you get the idea. So, and this is a public and private key with asymmetric keys. So a message needs to go from a sender to a receiver. So think about a receiver gives the center a lock physically, think about it a lock. So the center locks the message and transmits it to the receiver.
Play video starting at :5:19 and follow transcript5:19
Only the receiver can open the message because the receiver has got the key to the lock.
Play video starting at :5:28 and follow transcript5:28
Okay so, the center can lock the message but there's no ability to unlock. That's basic intuition as to how this works and the lock is basically the public key and and we will open it with the receivers private key. This is an example of my business card by the way. And notice at the bottom of my business card is a key, okay? So this allows people to encrypt an email with my public key and only I can decrypt the email because only I have the private key that's associated with that public key, okay? So this is a very important application and, this is a bit of a digression but it's important for you. So let me give you an example of PGP email. So this is how it works and it's interesting it uses both symmetric and asymmetric encryption. So the way it works is the following you start up compressing the message to reduce the size. That's no big deal, and then a random numbers generated it's called a session key, and usually based upon most movement so it's unique. It's a random number and that is going to be your symmetric key, okay? So that is going to be something that we're going to use because we're going to take the message, so the center is going to encrypt the message with that private symmetric key, okay? Then the next step is that, that session key is encrypted with the receiver's public key, okay? So that's a symmetric.
Play video starting at :7:44 and follow transcript7:44
So then the encrypted message and the encrypted section key are sent by email.
Play video starting at :7:52 and follow transcript7:52
The recipient uses their private key, to decrypt the session key, and then the session key is used to decrypt the message and then you un compress. So this uses both symmetric cryptography and asymmetric and very straightforward to do. So again this is a foundational material that we use in Blockchain technology.

# Adresses
We've talked about addresses. By now hopefully you've set up a MetaMask wallet and you've got an address. We need to understand where that address is actually coming from and that's what we're about to do.
Play video starting at ::19 and follow transcript0:19
Public address is basically derived from your private key. You've got a private key that's a random number. It goes through an elliptic curve algorithm and you derive a public key. The public key is basically manipulated to come up with the public address. Again, the public key can be public. That's why it's called public. The address is public also. The idea is with that public address, that is useful because somebody might need to send you something. They use that to send stuff to you. But again at least for today's technology not computationally feasible to go from the public key to private key.
Play video starting at :1:21 and follow transcript1:21
The way this works, again, both Bitcoin and Ethereum use Elliptic Curve digital signature algorithms, particular type, there's many different types of them. This is part of the details and basically the steps are the first thing is; you generate a private key and the private key is 256 bits, which we've talked about. It is represented as 64 hexadecimal characters, or it could be 32 bytes. We're going to use the Elliptic Curve digital signature algorithm to derive the public key, which is actually 512 bits. The private plus the public is called the key pair. We, in a digital signature algorithm, are going to be able to sign transactions using our private key and when we actually produce that signature, anybody looking at the signature and knowing our public address knows for sure that the person signing actually owns the private key or is in possession of the private key. In both Bitcoin and Ethereum the addresses are linked to the public key. Ethereum is very easy to get the public address. This is the way it happens. Again, you generate a random number that's going to be your private key. You pass it through the Elliptic Curve algorithm, you get 512 bits, which is a 128 hexadecimal characters. Then you're going to hash that with the Keccak 256. When you do that hash, you get something that's 256 bits or 64 hexadecimal characters. What you're going to do is to take the last 40 hexadecimal characters. There are 64 hexadecimal characters but we're going to take the last 40. We're going to ignore the first part. Then all we do is append that with a 0 x. Ethereum, the addresses are all appended with a 0 x. Very straightforward. The actual formula you can see for actually doing this is below and very simple, to go from the public key to the private. This is my MetaMask account. You can actually see my MetaMask public address ends with a CCE. Indeed, you could use that address to send me some coin, a tip. Maybe you can easily do that so it is available and that is definitely my public address and my MetaMask account.
Play video starting at :5:4 and follow transcript5:04
This is just showing the mechanics of how we go through a particular example where I generate a private key, a public key, then do the hash and then take the 40 last hexadecimal characters and append with the 0 x. Just putting real hexadecimal notation for Ethereum. Bitcoin is more convoluted, but it's still fairly straightforward to do. This isn't a Bitcoin course, but given Bitcoin is so important, I will go through the same steps as an example. You generate a random number, which is going to be our private key. Pass it through the elliptic curve routine and we get a public key. Notice that it's much longer, and that's why the fund is much smaller, 512 characters. Then we're going to perform a SHA-256 on the public key. All of this is identical to what we were doing, except Ethereum was using a different hashing algorithm. Ethereum uses Keccak 256, we're going to use the SHA-256 in Bitcoin, but then it gets a little more difficult. What we're going to do is we're going to use another hashing algorithm, which is a ripe MD. MD stands for message digest or hash 160 on that previous step, the SHA-256. The ripe MD 160 is actually a 160 bits, not 256, so it's shorter than the 256. Then in step five, we're going to add the version number in front of that ripe MD 160 and then we're going to do another hash. We're going to do a SHA-256 on the extended RIPEMD-160. Again, we've got the public-key. We do the 256 SHA, we do the RIPEMD-160, which has a shorter hash. We put the version number in front and then do a 256. Basically in doing this, we end up with 256 characters and step number 6. Then we do another SHA-256 in step 7. Again, we're still at 64 hexadecimal characters. In step 8, we're going to take the first four bytes of the second SHA-256 and that's going to be our checksum in terms of maybe if somebody types this in incorrectly. We're going to basically add the four checks on bytes to the extended RIPEMD-160 in stage 5. Do that and then convert the whole thing to base58. Base58 is the upper and lowercase letters. So that if you add 26 and 26, the numbers 0 through 9. But then we're going to exclude some ambiguous characters and we get to base58. That's what a Bitcoin address actually looks like. It's basically just a bunch of hashing. Ethereum much more straightforward, where you've got the public-key. You do the Keccak 256. Take the last 40 hexadecimal characters, apply the 0 x, you're done. Bitcoins has got many steps to it, but again, it's very mechanical, very fast to actually do.

# Signatures and Transaction Mechanics
Okay, so now let me talk about signatures and and some of the transaction mechanics, so digital signature is very important, it's a way that a transaction is actually organized. So if you're sending let's say some ethereum you need to prove that you've got the private key and that's where digital signature actually comes in. So you need to prove it without revealing the actual key, so this is very important and we use an algorithm to actually do this and this is kind of how a digital signature works. So let's actually go and look at this in some detail, so the private key is called the signing key, SK and it's completely secret of course. So you don't want to reveal that the public he is sometimes called the verification key and it's mathematically linked to the private key as I've already mentioned. Okay, so think of the private key, goes into an elliptic curve algorithm and a public key comes out and we've already gone through that there's got 512 bits to it. And there's actually, the reason is longer, it's two coordinates X&amp;Y, that's really easy as I said, to generate the public key with the private key and very difficult to go in the other direction. So the digital signature, what happens is that we've got a message and this might be our transaction. And what we're going to do is the inputs for the signature algorithm are going to be the private key of course and a nonce. Or just think of it as a random number that that is put in and we put those together and within the elliptic curve and you can, if you're interested in this, go into much more detail. There's certain ingredients that are very important for this elliptic curve operation including a base point, a module s which tells us the maximum number. That can actually happen in the operation and in order, so these three things and then basically a digital signature comes out of that and it's got to coordinates, R and S. So to verify the signature, what we're going to do is, we've got the two coordinates that are available R and S, how we got the message and we've got the verification key which is the public key. We pass all of that through the elliptic curve operation with of course the base point and the order and we're going to drive a new point. And then what we're going to do is to check one of the coordinates, the X coordinate and if it's checked, then if it's verified then it is a valid signature. Which means that the person signing must have the private key and that's how a dig digital signature actually works, so this is what it actually looks like. And we don't need to go through all of the details of this but you can see what the form of the elliptic curve is, you can see what the base point the order. And the module is actually is these are extremely large numbers, notice that everything is done in hexadecimal here. But these are are very large numbers but this works very quickly and seamlessly, so a few things to notice about this. So when you sign, you basically prove that you have the private key without revealing the private key and everybody can see that instantly verified. Okay, so think of this as, you've got the address, we know the address is derived from the private key. But with that address and with the digital signature then you prove that you actually have the private key that's associated with that address. Remember, anybody can grab an address like you've got my address, right, so I showed you my address, that fall, it has got CCE as the last three hex. So you've got that address and the problem is that you can't prove that you've got the private key associated with that address. There's no way you can do that unless you somehow hacked my computer and even if you do that, the private key is not on my computer. It's off the internet, it's actually in a hard copy form, so public keys, anybody can see, a private key, that's different, so that is that is basically hidden. So the digital signature provides that bridge without revealing the private key. You can do this signature where anybody can figure out that you must have the private key that's associated with that public address or public key. Okay, so this is essentially how this works and this is just an example, there's plenty of websites that actually do this where you can actually go and choose the elliptic curve algorithm. And actually go and do an exercise of generating a message that signed, so this is again a common technology. It is complicated but it's important for you to know the basics of this technology and you can see in Bitcoin, this is used in terms of the op checksig and within Bitcoin. This is also used in Ethereum and almost all credible block chains use this particular technique. Okay, so the the last thing in this module is how a transaction actually works and this depends upon the blockchain protocol and let me kind of start with a Bitcoin transaction. And what I like to do is to kind of zoom in on the actual graphic that you see over here, so let's take a careful look in that bag. There are three things, you can see that there's a three, there's a point two and a point 01, those are called unspent transaction outputs, so they represent Bitcoin. So the total balance in this wallet is 3.21, so suppose that you want to do a transaction and you need to send .15 Bitcoin to someone. Okay, so the way to do this is, you're going to use the unspent transaction output for the .2. That's going to be the input to the transaction and then the transaction is going to have two outputs. So the first output is the .15 that you're sending to somebody to, let's say pay for a good or service but then there's .05 left. So think of that as the change and what you're going to do is to send that back to yourself. Okay, so effectively, what we've done here, we've changed the bag, so that .02 is completely gone and it's being replaced by another unspent transaction output which is point zero five. So this is the way Bitcoin works but ethereum operates on a different system so while Bitcoin has got these unspent balances and you need to choose which one to use. Indeed, we could have chosen the three, so we could have chosen the three and sent .15 and then had change of 2.85, so it could have done that. But Ethereum's system in my opinion is much more straightforward and it is a system of account balances, so it's more intuitive. So the Bitcoin method is extremely interesting, it is a little more intuitive to keep track of balances and we saw this in terms of our supply mechanics, in terms of checking the ballots.

# Consensus
Another important concept is consensus. We talked about, in very general terms, something called proof- of-work. Where miners are doing the work to find that rare hash that will be linking one block to another block. Basically, this is a key ingredient for blockchain technology. This is the mechanism whereby all of the nodes in the network agree on the historical blockchain. It's really fundamental that we have to have some agreement. Again, the two main technologies are proof of work and proof of stake, but as we'll see, there's many different versions of this. Even consensus just to define it, is difficult. You could have majority, let's say 51 percent, you can have super-majority, you can have unanimous. It might be that not all votes are equally weighted depending upon what you're doing. This is like an ongoing issue to figure out what the ideal consensus mechanism actually is. We need consensus because we don't have a centralized leader. If you were centralized, somebody would just decide. But that's not the case in decentralized finance.
Play video starting at :1:39 and follow transcript1:39
You have to do this in a way also that we prevent, untrustworthy parties from dominating the consensus. Because if that happens, then the protocol will fail and people will not have any confidence in it.
Play video starting at :2: and follow transcript2:00
Basically what we're doing is agreeing upon; think of it as the new blocks. There has to be agreement, and the new block basically is added to a chain that people agree upon. Of course within the block, the transactions have to be valid transactions or the block isn't credible a block. Somehow consensus has to be achieved, and it's not achieved with human oversight. There's no central leader. One way I think it's good to think about this, is that once this is decided, it's irreversible. So you come to consensus you can't change your mind. Given the nature of this technology, that once the transaction makes its way into the block chain, that's relevant for, let's say Ethereum, then it's there forever. You get one shot at this. It's really important to get this right. This is distributed system consensus, there's lot of research on this, it is still fairly early on, but, I like the very simple definition here that, consensus is the process by which all nodes agree on the same ledger. It's got to have certain properties that's got to be resistant to attacks by malicious actors. Again, there's many different ways to actually do this.
Play video starting at :3:59 and follow transcript3:59
It's also interesting in the world of decentralized finance that we can have consensus where parties agree, but, you don't need to trust the other party. Indeed, you don't even need to know who they are. This is very unique. You think about, for example, a government vote or consensus; you know, exactly who voted for what. You might know that somebody is trustworthy or not trustworthy. This is completely different situation.
Play video starting at :4:40 and follow transcript4:40
This is essential that we don't need to trust other parties to come up with a consensus. We're going to verify transactions without trust. Indeed, within the system, anybody can be running a node, it doesn't matter who you are. Indeed, I've told you that it is technologically infeasible to go in and mess with the Bitcoin or Ethereum blockchain. A hacker would be much better just setting up a node. The hacker might be somebody that's completely not trustworthy, but they're running a node and you don't care.
Play video starting at :5:32 and follow transcript5:32
Because their incentive is not to attack the network, but effectively just to join and to profit from it. Again, there's various different types of consensus that we will talk about, and this is a key component in terms of what we do.
Play video starting at :5:58 and follow transcript5:58
There is, I guess, agreement in terms of consensus right now between Ethereum and Bitcoin's blockchain but that will change. Again, we'll take a look at these different technologies. One technology we've talked about already is proof-of-work. Again, it doesn't matter who is doing that work. We don't need to trust. The miners doing the work. They just needed to produce that really rare cryptographic hash. Those miners are assembling transactions, verifying the transactions, and then searching for the rare cryptographic hash. It is when they find the nonce that delivers out hash, it is very easy for anybody to verify that, that hash has a lot of leading zeros. That's a rare hash. Verification is really easy to do.
Play video starting at :7:8 and follow transcript7:08
Again, the miner is pulling the transactions from the memory pool, picking the most valuable ones first, and then cycling through different nonces to get this really rare hash when they win they get a reward. They get a reward in the Ethereum they get reward in Bitcoin. Of course, part of the funds that they get is from the transaction fees that are within this process. Again, you can have a node that is doing mining, so that's possible, or you can just have a note that's not doing any money, but just has a copy of the Ethereum blockchain on it and it providing service to the network. You don't have to be doing mining if you're a node.
Play video starting at :8:6 and follow transcript8:06
The way it actually works with the proof-of-work is the miner will search for that rare hash. If they find it, they will broadcast it to the network. As people or as the nodes on the network verify that the hash is associated with the nonce and the transactions that actually works, then they add that to their copy. They add that block, that candidate block to their copy of the blockchain, whether it's a Bitcoin or Ethereum. It propagates through the network. In Bitcoin this happens every 10 minutes, Ethereum is much faster to actually happen. As soon as that new block goes into a blockchain, then we start the process again going through the different transactions. In terms of strengths and weaknesses here, proof-of-work is very straight forward. It's proven to be extremely reliable. We can have a lot of predictability in terms of the block times. If a lot of computing power comes onto the network and that rare hash is found faster than, let's say, 10 minutes in Bitcoin, then the difficulty just adjusts to make it more difficult. Or if computing power goes off, for example, China shuts down some mining operations, then it takes a lot longer to find that difficult hash. Then the algorithm just adjust the difficulty, so it makes it easier and we stick to the time for the blocks. Again, this is pretty straightforward. It is of course vulnerable to a 51 percent attack. But I've already argued that that just doesn't make any sense in terms of the money that would have to be spent to amass the computing power. Even if you did that, what are you going to do? Are you going to send some crypto to yourself? Because if you do that, given that you've amassed 51 percent, nobody will have any confidence in the crypto and the price will likely go to zero. Even after spending all of the money and amassing all the technology, even if you could pull it off, you're going to destroy the value of the actual crypto. The only way that makes sense is if there was a national or international actor that wanted to drive the price to zero.
Play video starting at :10:57 and follow transcript10:57
It's vulnerable technically, but for strong blockchains, it's just not feasible. There are considerable strengths. This is very secure in terms of the amount of computing power it does necessary. But in terms of drawbacks, it's an enormous waste of resources. Bitcoin, for example, uses the same amount of power as Argentina. Much of the power is by fossil fuel, which is just not a good idea. We'll talk about this later in Course 4 in terms of environmental risk, where I will go through and show you a calculation of how much carbon offset you would have to buy to offset the carbon created by the money of one Bitcoin. Just one. This is a disadvantage also. The hardware is very specialized. The hardware that I showed you in Course 1, that's in the basement at Duke University, the S17 minor, it does one thing, [inaudible], it's hardwired in. That's what an ASIC is. It's a specialized chip that does one thing. The E3 minor does one thing and that is the Keccak 256 and it's designed to do that. The S17 does 53 tear hashes per second. That's all it does. So it's specialized and you could think, well, maybe that hardware can be used for better purposes. In a way, the proof of work is, it's got a lot of strengths, but it does have weaknesses. Indeed, there are other weaknesses. The scalability issue, there's just not enough transactions per second to be competitive so that is a problem. That's a reason Ethereum is moving to proof of stake. It's one of the reasons that we can do far higher throughput. The other thing with proof of work is that the miners really are invested in the system. They win their Bitcoin and Ethereum and usually just dump it immediately. They're providing a service, but they're not really a stakeholder in the sense of holding the actual currency. Again, proof-of-work is out there, but there's also going to be a transition to proof of stake. I put Ethereum 2.0 there, where Ethereum 2.0 means movement to proof of stake. What is proof-of-stake? Proof-of-stake is instead of everybody doing the mining, so think of thousands of machines going through, cycling through and doing the mining, what about just delegating to one minor? Choose somebody at random. Indeed, why not do that in a way where it makes sense for the system? Instead of just a random miner being chosen why not have it based upon the size of either the holdings or a stake. You put up some Ethereum and you stake it, and you look at all of those that have staked, and let's say that I put up 10 percent of what's staked, and then probabilistically, I will be tapped on the shoulder designated to mine about 10 percent of the time.
Play video starting at :14:59 and follow transcript14:59
This is a very nice idea in that what it does is it eliminates all of this redundant mining so you still go through some of the same steps in terms of hashing, but this is way more energy-friendly to actually do. There are various different aspects to this. One aspect that's interesting is that there's not the redundancy, as I've mentioned, but there could be this extra incentive in terms of the stake. You actually, given that you've got a stake, you're invested in the currency, that you are incented to do the right thing. For example, suppose you did the wrong thing, that you grab some transactions from the memory pool and one of the transactions is a bogus transaction. Then you propose I block and think of the following. That because you made a mistake and you put an invalid transaction in, then we reduce your stake. You got to pay for it, you got to cover the cost. Okay, again, this makes it very compatible to do the right thing. Because you, of course, you're being rewarded when you get designated, but you actually are incented to do the right thing because you've got a stake. This is proof of stake and it's got a lot of advantages, no useless mining. Indeed, there's not really a reason to have this competitive hardware advantage. This could be just a regular computer rather than a specialized ASIC miner.
Play video starting at :17:23 and follow transcript17:23
It's compatible in that those with the biggest stake, they are most probable to be designated to mine, but they also have the most to lose. The incentives are aligned. Good idea. It's also this idea of the 51 percent attack doesn't make any sense in terms of proof of stake. It makes sense in proof of work, but not proof of stake. We've got a designated miner that will be assigned to add the next block. This is far more efficient than a proof of work. There are many blockchains that exist today that use proof of stake. This is not without risk, and theoretically it encourages centralization. Think of it this way. The miners with the most or the actors within this network that have the most Ethereum, they're most likely to be chosen to do the mining and most likely to get the reward for it. Effectively, the rich get richer and it's possible that this could lead to more centralization. That is a well-known drawback. Some people claim that the security of proof of stake is not as good as proof of work. I think some of these claims are by people that have an interest in maintaining a particular or consensus mechanism. For example, a bitcoin miner has no incentive to change to proof of stake because all of their investment and their computing machines would go basically to zero. I don't think that this is really a drawback. Just to close here, I've talked about proof of work. I've talked about proof of stake, but there's many other iterations. For example, delegated proof of stake. It's a very interesting idea that I might have a small amount of ether, but I can delegate some of that to somebody else so that they actually build up a bigger stake. Then I share in the rewards when they're designated to do the block a good idea. There's delegated Byzantine Fault Tolerance very popular in some commercial implementations of blockchain. Proof of capacity, proof of elapsed time, proof of identity, proof of authority, proof of activity. There are so many of these candidate mechanisms. We'll see what actually happens. Again, this space is very early. We started with proof of work, now we've got a number of different candidate consensus mechanisms, even within proof of stake, there's many different ways to actually do that, but there will be a transition. For almost all of the cryptos, there will be a transition to something like proof of work. To mitigate that problem, which I consider a very serious problem, the environmental problem, bitcoin will stick to proof of work. We'll talk about that risk a little later on in the fourth course.

# Incentives, Latency, Data, Computing Power
Let's continue on in terms of our big picture, in terms of the technology that you used in decentralized finance. We've actually already talked about incentives and we will further talk about incentives in terms of how this ecosystem actually works. Incentives are really key. The miners are incentive to do the work that's necessary for the security and the validation of transactions. We've got the keepers that are incented. We've got the possibility of different protocols incentivizing people to interact with the protocol. We've got many different levels of incentives, and this is a key thing. It is interesting that just within the network, within the Bitcoin and Ethereum network, there's no direct reward for running a node. If you're not mining, there's no reward for that, and you can maybe understand a company having a node or a university. I guess the point I'm making is that, well, incentives are an important part of this ecosystem. There's still some gaps. Latency, I've talked about already. It's a big issue. I spend a lot of time in the fourth course talking about different technologies that can address the main issue. Visa routinely can do 24,000 transactions per second and their capacity is up to 75,000 transactions per second. If you look at Bitcoin and Ethereum is trivial. I'll compare it to that. That's the reason that Bitcoin cannot be a credible transaction mechanism on a large scale given the current implementation. Ethereum looks like it falls into the same category, but the next version of Ethereum that will be implemented likely in early 2022 will have capacity double rival visa. In my opinion, that's still not enough, additional work needs to be done. But still it's a big jump going from 18-75,000.
Play video starting at :2:31 and follow transcript2:31
Data. Blockchain contains data. Blockchain is like a database, like a bit as a database, but it's very special database because it is immutable, so you can only add to it, and it's also redundant, in that the same database resides on many different nodes. The question is, well, what about putting data into a blockchains? There's many different things that we talk about. It could be a transaction, I going to move some token from one person to another. It could be a smart contract I put in. But I think I've told you already that this is very general technology. We could put things that are relevant for a supply chain in a blockchain, but that takes space. Remember that every node on the Ethereum blockchain has got that entire history. In the future, of course, the price of data continues to decrease at exponential weight. If you look historically at how much it cost for a gigabyte of data, it's really striking that the prices plummeted. Today it's about one cent. In the future, I think blockchains will be able to have more data. But right now, the data is quite limited in terms of what we can do. But that doesn't mean that we can't have a technology that allows for more data to go into a blockchain. Computing power. You've probably seen this graph before, maybe a little different than the usual one you've seen, because I actually measure calculations per one dollar in constant dollars. Notice the y-axis is double exponential. There's a limit to Moore's Law in terms of the actual depth of a chip. You go to the atomic level, there's going to be some quantum effects. There's a limit to Moore's law, but there's also another computing revolution going on in terms of quantum computing. Just to be clear here, the quantum computing is irrelevant for cryptographic hashing, but it is relevant, as I mentioned, for the digital signature algorithms. I'll have a little more to talk about that later. Let me give you an application to end this subsection. This is from an assignment in my course. At Duke University, all the students deploy multiple smart contracts. But the first one that they deploy, they basically send a hash to that contract, so a shot 256, and you send it to that contract. That's the mechanical part of the assignment, and the deeper part of the assignment is, how could that be useful? Sending a hash doesn't really take that much space. It's 256 bits, so it's fairly cheap to do. Why would you want to send a hash to a contract? This is what they think about. It's really interesting all of the possible answers that come out of that. For example, let's say you've got an idea. You want to be able to prove that you had the idea at a certain point of time. Maybe it's an idea for a new business and is contained in a pitch deck.
Play video starting at :7:9 and follow transcript7:09
You take that pitch deck and you do a shot 256 of that deck. Then you deploy that to a smart contract. When you do that, we know exactly the time that, that hash was put into the smart contract. The hash is there for anybody to see. Then suppose that a competitor comes up with the same idea. You say, well,
Play video starting at :7:47 and follow transcript7:47
no, I had this idea first. Then you send the deck to them. The date on the deck is, let's say six months ago. The competitor says I don't believe this because it's really easy to change the date on a file. Then you tell the competitor said, no, do a cryptographic hash of this file, then go check this particular block on the Ethereum blockchain. You can see that this document existed as it exists exactly today, six months ago, and the exact time is there. This is basically a proof that this existed at a particular point in time. This is so many different ideas. For example, suppose you have a contract and you've got electronic versions of the contract, and there's a dispute. In the dispute, there is a disagreement because the two electronic versions are different and you have to go to court and fight it out. Now, think of a different world were the two parties are trying to put together a contract. They agree upon a contract. You take a cryptographic hash of that contract, you deploy that hash, you send that hash to the Ethereum blockchain. Then in the future if there's any dispute over the version. Party A says, it's my version is the true version and party B says no, my version, is the true version, it's really simple. You take a hash of version A. Does version A's hash match what's deployed to the Ethereum blockchain, yes or no. Let's say it's no. Then you go to B's, you do the hash, you check the Ethereum blockchain and matches. Therefore, A's contract has been tampered with, and the B's contract is the true contract. Great idea. There's another assignment I'll talk about and it's a lot of fun also. This is a slightly more elaborate on smart contract. I tell the students to send a hash to it. Then the contract has got the ability to reassign that hash to another address. I get them to resend the hash to somebody else, the teaching assistant in the course. That means that when that's done, the teaching assistant has ownership of that hash. Then of course that's the mechanical part. The other part is how is this useful?
Play video starting at :11:8 and follow transcript11:08
It is very powerful, smart contract. Indeed, I tell my students that this is the single most valuable assignment you will have at Duke University because you can reuse it. This contract allows basically the exchange of anything that can be digitized. That hash could represent your ownership of something. Then you can reassign the ownership to somebody else.
Play video starting at :11:46 and follow transcript11:46
Very powerful idea, is similar to an NFT. It's not as elegant. An NFT has got much more functionality, but it's the same idea. You've got something that you own and that's proven in that smart contract. Then you're able to reassign using that digital signature, sign over the ownership to somebody else, and then they are the owner. If they want to transfer it, then they need to sign it over using their digital signature algorithm in the same way. Very cool idea. Lots of applications right here.

# Cross-chain, Immutability, Oracles, Privacy
Okay, let's finish off the Block-chain Tech Big Picture, we have a few more topics to go through. So first is a question. So what will the world look like in the future when there is potentially many different blockchains? Remember a blockchain is a construct that is closed, right? So we can basically go out to the outside world with an oracle, which we'll talk about in a minute, but it's closed. So there is great interest in what the world will look like. Will there be a master change and sub chains or side chains? Will there be technologies to bridge change? And some of these technologies are actually emerging so that you can go from one chain to another chain in a very efficient way, but this is an issue. So think of this as the wild west of blockchain where we will have potentially billions of block chains and we need some sort of technology to manage that. So mutability I've said is the key component of a Block-chain. There have been many forks and forks are something that anybody can do. So I can create a different version of Ethereum, I can download the Ethereum Blockchain and make a change. Ethereum has been forked before. So we've got Ethereum, we've got Ehtreum classic, Bitcoin has gone through many different forks. So these forks it's interesting that forks are something that just don't exist in centralist finance and it does cause some confusion, but it is on the balance. Something that is really important for this technology that we can very quickly improve the technology and the fork, if it doesn't work then people are not going to be interested in it and it essentially goes away. So it is basically the survival of the fittest and it's operationalized in a decentralized finance. We've talked about oracle's already this is a challenge for this technology. Many applications need to reach out and go beyond the Blockchain that they live in and you need a reliable way to do that. We talked about the chain link and other companies that are in this business to make decentralized the oracle of function, but nevertheless this is something that is still a challenge within the space. Governance. So we've talked about consensus in this course, but governance is still something that needs to be worked out and for example, some protocols like Bitcoin very challenging to make any changes like simple changes like making the blocks able to have more transactions to kind of speed things up. The Bitcoin community debated for years over that. So something seemingly simple, very difficult to get consensus on. So this is a challenge that exists today and likely will exist in the future.
Play video starting at :3:57 and follow transcript3:57
Privacy. This is another issue and certainly this stuff is in the news where Bitcoins used for ransomware, we do have some cryptos that are fully anonymous and there are many issues here, but it's not just a Blockchain issue? This is not just a crypto issue. This is a general issue that people can communicate with apps that are private and potentially plan nefarious activities with that. So this is a general question but I think that it's probably good to step back and kind of think about privacy in a different way. So there are many applications of Blockchain and you think that maybe a logical application would be voting.
Play video starting at :5:1 and follow transcript5:01
So given the security of this technology we could have a voting mechanism where we could vote electronically. We'll have the results immediately and they would be verified immediately.
Play video starting at :5:18 and follow transcript5:18
But one issue with that is if we did that potentially the government would run a Blockchain so would be centralized and it's not clear that you want the government knowing how you voted.
Play video starting at :5:36 and follow transcript5:36
So there is this idea of zero knowledge proof that I kind of want to end the course on because it's a powerful idea.
Play video starting at :5:45 and follow transcript5:45
So think about it a different way.
Play video starting at :5:49 and follow transcript5:49
Go to the store and you want to buy six bottles of beer and they ask you for your ID.
Play video starting at :6:2 and follow transcript6:02
So you give your driver's license and on that license is your name, you're birth-date which is important but it's got all this other information, your driver's license number, your address, why does the store need all of this information? They Just need to know are you 21 and above. Yes or no.
Play video starting at :6:32 and follow transcript6:32
So is there a way to do this and this is going to be important for especially Blockchain technology, but this idea of zero knowledge proof. So in the voting context you go and you prove that you have the right to vote and you don't need to provide any other information. So how does this work? And I've got an example that you might like. It's an example I use in my course and it has to do with two billiard balls. There's a red ball and a yellow ball.
Play video starting at :7:17 and follow transcript7:17
So I've got these two billiard balls, but my friend is color blind, so when she looks at these two billiard balls, they are identical.
Play video starting at :7:36 and follow transcript7:36
So she can't tell any difference between them. So my job is to prove to her that those balls are different color and I want to do it in a way where I don't tell her which one is red and which one is yellow.
Play video starting at :7:59 and follow transcript7:59
Okay, so that is the basic setup. So now what I'm going to do is that I will take these two billiard balls and hand them to my friend and tell her this is what we're going to do. You're going to take the billiard balls and put them behind your back and then you've got a choice, you can switch the balls or keep them the way that they are.
Play video starting at :8:30 and follow transcript8:30
Okay, so she's got the two balls in her hand and I can see that the one in her left hand is read the one in the right hand is yellow and I should be able to tell if she switches if they are really red and yellow.
Play video starting at :8:52 and follow transcript8:52
So we go through this and she takes the balls and puts them behind her back and decides not to switch, pulls them out and I say you didn't switch. She does it again and doesn't switch, pulls them out and I say you didn't switch and this time she switches bring some out and I say you switched, okay. She keeps on doing this and every single time I get it right. So we do it ten times and if you think about luck here that well the first time that had happened where I said no switching was 50% likely I could get lucky. In the second time well maybe you get two in a row and that's like 25% probability. But once we get the 10 and I get 10 out of 10, the probability of this just being a luck that I'm just guessing. Just lucky, that's 0.009.
Play video starting at :10:11 and follow transcript10:11
Okay, so you see where I'm going here. So what I've done is that I proved to my friend and she being color blinded, they look the same to her. I proved to her that these two billiard balls were different colors and it's probabilistic we could do it ten times, we could do it 100 times or 1000 times, it doesn't matter. This is a mechanism for me to prove that and I proved it in a way where I don't reveal which billiard ball is red and which one is yellow.
Play video starting at :10:51 and follow transcript10:51
So this is a very high level zero knowledge proof but to get the idea that this is something that could be implemented in and is implemented in a number of Blockchain technologies. So we are coming to a situation in our world where we won't need to reveal unnecessary private information using zero knowledge proofs and literally using Blockchain constructs that have a record of history, record of the truth, a record of who owns what. That is not possible in terms of a central actor to manipulate that.
Play video starting at :11:43 and follow transcript11:43
So we get to verify by looking at a Blockchain construct so that I believe is where we're headed. That is the big picture in terms of technology for this and let us take a look at our word cloud that I'll show at the end of each course and become actually a long way in terms of all of these sort of words are still some to go and we will deal with the rest of the words actually almost all of the words in the third course which is DeFi Deep Dive. So in Deep Dive we will look at various different applications. It's the most practical of the four courses where we will look at that protocols that deal with credit lending. We'll look at decentralized exchange. We return to, you know, swap that was introduced today. We will look at derivatives and tokenization and really get down to some examples of how the mechanisms work for the most popular applications and decentralized finance.