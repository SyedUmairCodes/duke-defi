# Transaction Mechanics
Welcome to the second course in the learning experience, DeFi and the future of finance. The second course we're going to talk about DeFi primitives. These are the fundamental building blocks of DeFi, and it's really important to understand them to fully appreciate the potential of decentralized finance. We've already gone through in the first course, DeFi Infrastructure, and that introduced some of the key concepts that are important for, not just DeFi, but blockchain technology in general. In this course, we will talk about the mechanics in the first module , of decentralized finance. The idea of supply and how supply is varied in terms of an increase in supply and decrease in supply. Ownership. We'll talk about loans, in particular, collateralized loans, and swaps, which is basically exchange. Then at the end, I've got a module that talks about joining the world of DeFi, and we'll set up a wallet using MetaMask. Then near the end, what we'll do is review the blockchain tech big picture, to go through the key general concepts, so we're all on the same page. In the third course, which comes next, we'll do a deep dive into the existing protocols that are very popular in terms of DeFi today. The final course, course number 4, focuses on the risks and the opportunities of decentralized finance. Let's start with the mechanics. We'll talk about transaction mechanics, we'll talk about fungible tokens. We've already introduced fungible tokens in terms of the ERC20 in the first course. But remember, I said in the first course that there'll be a number of opportunities to revisit some of the concepts that I introduced in the first course, and this is one of the opportunities. Of course, we will also talk about NFTs or non-fungible tokens. Let's get started with the mechanics.
Play video starting at :2:39 and follow transcript2:39
Transactions in Bitcoin and Ethereum are different because Ethereum offers something extra. I mentioned this in the first course but really want to emphasize that here. There are two types of accounts or addresses in Ethereum. One is an Externally Owned Account or an EOA, and that's basically what you're going to set up at the end of this course using a MetaMask wallet. You will have an address. I've got an address also, I will share my public address with you. Indeed, we will talk about how that address is actually derived today in considerable detail. With this externally owned account, it is very straightforward for me to send some Ethereum or any token that's associated with the Ethereum blockchain from one address to another address. It might be that I'm sending to you, but it might be I'm sending to myself because I can have an arbitrary number of addresses. Indeed, think of it as a physical wallet, where you've got two physical wallets and you can take some paper currency out of one wallet and put it into the other wallet, and that's same thing happens in the world of decentralized finance, but obviously it's all virtual. However, Ethereum, and this is where we depart from the Bitcoin world, there's more, so it's not just externally owned accounts. There is a possibility of a contract account. This is a smart contract that lives on every node in the Ethereum blockchain. In that account you can actually send funds to, and that account can disperse funds. It is an algorithm that's running that is very important. This is a key distinction between Bitcoin and Ethereum. There's nothing like this in Bitcoin. All we can do is to use Bitcoin as a transaction mechanism to transfer fund. That's basically it for the implementation of Bitcoin that exists today. Ethereum is much richer. This is a different level, and this level is going to be really important.
Play video starting at :5:33 and follow transcript5:33
Basically, it's also possible that when you send a transaction to a smart contract, it potentially can go from that smart contract and interact with many other smart contracts. Is going to be important for us? It's not just you send something to the contract and maybe the contract sends something back to you. No. It's possible with this idea that I introduced in the previous course of DeFi Legos, that this contract is there, and when you send a transaction to it, it might have many different steps. You start by interacting with one contract, so that's the genesis. But then it's possible from that point to interact with many other contracts. This is going to be important, in particular for trading and arbitrage and refinancing of loans and things like that. Disability to interact with multiple contracts even though you start with one. Another property that is going to be crucial and very important to understand is the idea of atomicity. What do I mean by that? These contracts are atomic. This is what actually happens. Let's say I've got a transaction that has multiple steps in it. There's multiple different components, so I'm going to be interacting with many different smart contracts, so it's got many different layers to it.
Play video starting at :7:39 and follow transcript7:39
Let's say I've got 10 steps, and I go through the first eight steps, no problem, but there is a problem with the ninth step, so the contract fails, and the transaction fails. That means that we actually revert to the original state. Think about the difference here between traditional finance and decentralized finance. Maybe you've got a wire that's going to the UK and then it's going to, let's say France, and then it's going to hop to Hong Kong. Suppose is no problem that the wire goes to the UK, and there's no problem of going to France, but then something happens. There's a problem with the last step going from France to Hong Kong. Well, your funds are stuck in France again, and you need to get them back somehow, and that's going to be a time costly effort, and who knows exactly what happens. In decentralized finance. No. If you're transactions got 10 steps and something fails on the ninth step, then you revert to the initial state. This is going to be particularly important and it will preview a concept that I introduced in the first course, this idea of a flash loan. It's going to be very important. Think about taking a loan out in the first step that you're going to pay back in the last step. I will argue that loan is pretty well risk-free. It's risk-free because if there is any problem with any of the intermediate steps, you revert to the initial state before you took the loan.
Play video starting at :9:59 and follow transcript9:59
Having this atomic property is really crucial for the functioning of decentralized finance, so think of it as funds moving between many different contracts, exchanging hands. You know when this is happening, that if anything goes wrong, then you've revert back to where you began. This is again, a very powerful idea and crucial to defy. In the first course on defy infrastructure, we did introduce this idea of gas. Gas is an important concept. The cheapest in terms of the amount of gas that you need, is just a simple transaction between two externally owned accounts, just a simple peer-to-peer transfer, let's say of Ethereum. Again, it's really simple. It doesn't take much computing power to do that. That computing power is directly quantified into the amount of gas that you need. All computing power that's used on Ethereum blockchain has got a calculation in terms of the amount of gas that's necessary to actually do it. This is why Ethereum is a distributed computational platform. You're actually running some code. That code might be really simple, and it wouldn't take much gas, or it might be more complex. You can imagine a transaction going to a smart contract that has got multiple components to it, where you interact with many different smart contracts. That's a much more complicated transaction. It will take more gas. Of course, the cost of running this is the amount of gas, which equals the amount of computing power multiplied by the price of gas.
Play video starting at :12:24 and follow transcript12:24
The price is set competitively in an auction. As I said in the first course, that if the network is very congested, a lot of people are active, then the price of gas will be bid up, making it more expensive to do any transaction, and especially a very complicated transaction. Just let me review a few important things that if you calculate the amount of gas and send more gas than is needed to do the transaction, then the residual is transferred back to you, the user. You get a refund effectively if not all the gas that you budgeted was used. However, if you don't send enough gas and let's say you've got this transaction with 10 different steps, it gets through the first eight steps, but then runs out of gas. Well, that's what I was talking about in terms of something failed. Something fails in that transaction, and what happens given that this is atomic, we revert back to the initial state before number 1 through eight were actually executed. In this case, there's no refund, and there's no refund for a simple reason. You actually use the computing power of the network to get through steps 1 through eight. It doesn't make any sense to refund something that you've actually already used. That is an important subtlety of how gas actually works. Again, the gas fee is set competitively in an auction. Gas is an issue, and we have already talked about this in some detail that if the gas price is too high, then it discourages people from doing smaller transactions. Ideally, we want a world of defy where the cost of transacting is really low. Ethereum developers totally understand this and think of this as a short-term problem that they are actively working to solve. Because for Ethereum to really take off as the premier decentralized finance platform, the cost of transacting must be reasonable. There are other competitor platforms currently today that are not using proof of work, or the cost of transacting is far less than Ethereum. There's direct competition and many defy platforms are available on these alternative block chains too. This is something that obviously the force of competition will effectively push Ethereum to the point where these transactions' fees are greatly reduced. Interestingly, for Bitcoin there's no gas fee but say there is a transaction fee, but there is no initiative like the second version of Ethereum going to proof of stake. Bitcoin is stuck in the world of proof of work. Let me talk about something else, which is the memory pool. When a transaction is proposed, it goes into a holding area. This makes sense because we need to verify. Think of a simple transaction where you're sending Ethereum from one party to another party. Well, what does a validation of that transaction look like? Well, the first thing is that a miner needs to gather it into their list of transactions. The first thing they're going to do is to look at the fee that they could actually make in terms of like the gas fee. That's the first thing they'll look at, so gather the transactions. The second thing, they're going to make sure that the transaction is valid before they go ahead and mine a block. If you put an invalid transactions into a block, even if you win the lottery of the hashing, the block won't be recognized because it's got an invalid transaction in it. You need to make sure everything is valid. You pull this stuff out of the memory pool. The memory pool is completely public, everybody can actually see these. This is basically the way that the miners gather the transactions and validate. But there's something else here that's interesting and it is a result of proof of work. The miners actually see all of the pending transactions. Think about that in centralized finance. Suppose that you had insight information that there was going to be a really big buy order for Ethereum. Wow. That's something that you might want to get ahead of it but in decentralized finance, all of these pending transactions are public and what we're really talking about is front running. Again, in traditional finance, you can't do this. This is the illegal. You've got inside information that for example, somebody has got a huge order for IBM stock and then you go buy the stock before that order goes through. That's called front-running. Then when the order goes through, it boosts the price because of the price impact and you make some money. That is the illegal, you're using inside information to front run. What we're talking about here in the world of decentralized finance is legal, front-running. It's legal because it is completely open, anybody can see it. A miner might actually choose to exclude a transaction or put their own transaction ahead of a transaction and front run. Now, interestingly, this only works if you win the blocks, there's some risk to it. But if enough miners are actually doing this, then there's another source of revenue for the miners. It's called minor extractable value. The miner extractable value is the amount of money that they can make by legally front running some transactions. Again, this is something that is sharply different from the world of centralized finance and this is an issue with proof of work. This is one of the drawbacks of proof of work. When we transition to proof of stake for Ethereum, this is much less of an issue. Think of this as another reason to move to proof-of-stake, to mitigate essentially the miners front running the users and when that happens, obviously it makes the user experience a less favorable experience. You can see, and this is a graph that shows that the amount of miner extractable value, or MEV has been increasing through time. These are the basics of transaction mechanics, both the positives and some other negatives with the current technology.

# funible tokens
For the second part of the mechanics. Let me reintroduce fungible tokens. They are a crucial component of decentralized finance. So let me review the main protocols. So the most popular protocol is the ERC 20 and ERC represents a theory request for comment. So this is a protocol that can be used by anybody to create a token. As I mentioned in the course that I teach called innovation and crypto ventures as part of what we do in that course is to create a token. It's very straightforward to do. The amount of code that you need is maybe 20 lines and it is generally available to do that. So you don't need to be a solidity programmer to actually launch a token. It's very straightforward. You just need to set basic parameters like the number of tokens and the visibility of the token and you are done. So it is remarkable that you could launch a token so easily. So ERC is a fungible token and as we kind of went through in terms of what that means. That means that every single token is identical in value, just like every single $1 bill is identical and value and ten $1 bills is identical to a $10 bill. So these this is the basic idea of fund ability. And the great thing with the ERC 20 protocol is that the tokens that are created with this protocol can interact with each other very easily. So any ERC token that's created on the ethereum block chain can interact with any smart contract that's created. So it's not siloed basically it's interoperable, a very powerful feature. So the integration is a big advantage for ERC 20. And again within a program to create ERC 20 certain key aspects that have already mentioned things like you need to set the total supply you need to be able to read the balance of a particular user, there's transfer approval. All this stuff is kind of basic stuff that's layered into the smart contract for it to operate efficiently. So this is very straight forward to actually pull off. So let me introduced the idea of a fungible token that is an equity token and I don't want you to confuse this with another type of token that might actually represent a share of equity. So we've already talked about the possibility of widespread tokenization where you can have a token that represents an ounce of gold or a gram of gold. You can have a token that represents a share of apple and maybe it's divisible by a million. So you can buy a millionth of a share of apple. This is not what I'm talking about when I talk about equity token and equity token has got a particular meaning that's going to be important. So basically dis token is going to represent your ownership or your equity in a pool or some particular underlying asset, okay? So think of a pool and you've got a share of that pool and what we'll do is to issue an equity token that represents your share of the pool. So let me go through and give a simple example. So we'll have a token which was called TKN. And it's got a fixed supply of 10,000, okay? And this token is corresponding to an ethereum pool that has got one 100 ethereum in it, okay? In the smart contract they're basically it's holding some ethereum, okay? And there's a token that corresponds to that pool, okay? So what does that mean? Well that means that if we've got 10, 000 of these tokens and they represent a share of this pool with 100 ethereum in it. Well that means that the exchange rate is 100 token per either, okay? So this is basically just showing what the the ownership is of the pool, so token is away and it will be an ERC 20 to represent ownership in the pool. So it's also possible that token can appreciate in value. So we've got a pool of ethereum that's increasing at 5% per year. So then are our 100 of the TKN token, they represent one ethereum but there's also the possibility of this 5% and again possible perpetual cash flow from it, okay? So this basically allows us, given this structure we can instantly see what the value of the TKN actually is. We know what's in the liquidity pool it represents a share of the liquidity pool and we can instantly figure out what the value is in terms of the base asset in the liquidity pool which is either and this particular example, okay? So it turns out that this could be even richer in terms of the possibilities. And in the third course defy deep dive we will talk about variable interest rate mechanics that is used in a compound protocol which will spend a fair bit of time on because it's a very important protocol. It's possible that the contract or liquidity pool has got more than one thing. So I give you the example where there's 10,000 token issued as equity token on 100 ethereum pool. Well what if there's other things in the pool? So there might be a theory in the pool there might be USDC. The stable coin based on the US dollar or die or many other things that reside upon the ethereum block chain, okay? So it could be much more general in terms of the ownership. And indeed this could be dynamic. So what's in the pool could be dynamically changing with a set of rules and we'll talk about this when we talk about set protocol in the third course. Where you can literally have an algorithmic trading strategy that's hard coded into the contract that is swapping in and out of let's say ethereum and USDC. And you can own a share of that with an equity token. So very powerful idea. So there are at least three different types of tokens. So we just talked about an equity token. There are also utility tokens. So this means that this token is required to utilize a functionality of a particular contract, okay? So it's providing utility that you needed to actually run the contract, okay? So the value is determined by how useful that contract actually is, okay? So there's many different types of utility tokens. So utility token could be used for collateral, it could be used for reputation or sticking. It might be a stable coin. So I mentioned USDC. The decentralized version of a stable coin would be something like die, which we'll talk about in great detail in the third course. So all stable coins are utility tokens in terms of decentralized finance. And it's also possible that it is being used to pay fees for a particular application. So all these are just examples of what utility tokens can actually be used for. So it's kind of interesting I guess the last example I want to spend a little bit of time on in terms of the stable coin utility a coin. So stable coins there's many different types of stable coins and we will go into some detail on this. There are physically collateralized stable coins like USDC. So there are dollars that are sits in some vault somewhere. There are crypto collateralized like die. So would die it's over collateralized with either or any a list of ERC 20 compliant tokens or it could even be algorithmic, okay? So the idea here is that there's different ways to think about the value. So for something like USDC. You rely upon institutions that are centralist like coin base the guarantees that the USDC is worth $1. But there's other methods. So for the crypto collateralized you rely upon a transparent system where you can see that the currency is backed by collateral and anybody can see it at any time. And it is backed by more than enough collateral. And if that collateralization ratio gets too low then that might impact the value. It might impact the peg to the stable coin. So it's a big incentive to keep that collateralization high. So again there's a different approach. One is more centralized than the other and we'll have much more to say about this. So the third type of token is a governance token. So this is the third type of fungible token. So and I want to distinguished because it is a little confusing because we think in in terms of centralist finance. So you buy some shares of IBM and we call that equity. And actually you have voting rights at the annual general meeting or for special resolutions. So that is both a share of the equity of IBM as well as governance. So in decentralized finance, the equity tokens are basically representing the share of the assets in the pool or in the smart contract. There is another level of governance of that smart contract. So the protocol might have a governance token and those that own the token are able to vote on changes. Some parameters might be variable in that smart contract, okay? So for example, we'll talk about collateralization. So if your collateralizing a stable coin with a very risky and volatile cryptocurrency, then you have to have more than 100% collateral. And you can imagine that if that cryptocurrency became even more volatile, then what we want to do is to increase the collateralization ratio. And that's the sort of thing that the governance would vote on, okay? So basically these contracts often have again, completely transparent certain parameters that can be changed by governance. And again, I want to loop back to a very interesting aspect of this, that if the governance change is one of those parameters and that led to people having a bad experience and what's going to happen? Well, if the basic idea was good, somebody is going to grab the code which is completely open source and change the parameter back or have a different system implemented so that they attract the people that left the old platform, okay? So you need to be really careful in terms of the governance that you don't do something that causes your protocol to lose value. So the incentives are exactly aligned. So governance tokens are very important. And let me mention another item that's really important. Often when a new idea is launched, the developers know that there's going to need to be a certain number of changes that potentially need to happen very quickly. So basically there'll be some bumps in the road. So often the developers are debs, will retain like the majority control of the governance token, okay? So this has happened with the number of popular protocols but and this is important. They say that will retain control in the short term. But we've got a schedule whereby we will go and essentially make this truly decentralized and that means that the developers lose their majority control. And this is again happened with a number of important defy protocols. And indeed it's very interesting that and some of them the governance tokens were just distributed so called air dropped to those that were using the protocol. So if you're using it in terms of putting liquidity into the protocol, then you've got a reward of the government's token. If you're using it to borrow then you're going to reward, okay? So the governance token essentially was used as an incentive, okay? But this idea again you're really only truly decentralized finance if you are decentralized, which means that there's no one group that has control. But again think of the short term and the long term. So again there's many different ways to implement governance token. So it might be that there is a fixed supply. And then when that supply runs out that's it's also possible to have a governance token that has got some sort of inflationary rule. So the token can the total number of token can increase. So maker, which we'll talk about and that's the governance token for die. That has got a static supply a comp which is the government's token for compound that has got an inflationary supply and again they use it as an incentive. So to use the platform and think about this that if you deposit your money into a liquidity pool you get some sort of interest rate a savings rate. But you're also being rewarded with the governance token which makes the rate of return even higher. Or think about borrowing so you're paying a rate on the loan which is most of the time far less than let's say a bank loan but you're also being paid the governance token. It's basically it's an incentive to do what you're doing. So that reduces the effective rate that you're paying on the loan even more. So very powerful idea.

# non funilbe tokens
Okay so next let's talk about non-fungible tokens. So we've talked about the ERC-20 and how it could be an equity token, it could be a governance token, it could be a utility token.
Play video starting at ::18 and follow transcript0:18
So NFTS are different. So they are created via Ethereum's protocol. It's called an ERC-721, rather than the ERC-20, and this is the non-fungible token standard. So the difference between a fungible and non-fungible token is that every token is different.
Play video starting at ::48 and follow transcript0:48
Okay, so it's not the case that any two NFTs are equal in value. And you don't do the addition sort of thing that we do in fungible tokens either. Everything is unique, a unique ID. And interestingly, when they first came out people talked about NFTs as deeds and I think that's a good intuition. So think of it as a deed that essentially gives you ownership of something that's very specific.
Play video starting at :1:33 and follow transcript1:33
So you think of a deed to a house for example, well that's very specific to the house. So one deed for one house is not necessarily equal to a deed for another house. So more generally, it could be a bond or a loan contract or something like that that has got a unique ID and a token associated with it. So remember I'm very much of the opinion that everything will be tokenized in the future. So some things it kind of makes sense to use an ERC. So for example gold. So if you've got a token that represents one gram of gold, then it needs to be fungible. So two tokens, both of them representing one gram of gold should have equal value.
Play video starting at :2:32 and follow transcript2:32
However, there's many other applications where the asset is unique, and it might be as simple as a lottery. So it doesn't make any sense to have lottery tickets that are ERC-20, because everything is the same. How can you figure out the winner? But if you had ERC-721 then one is drawn. So idea of lottery, I'm not sure I talked about it in the course but I should. You can run a fair lottery in terms of decentralized finance. Today if you put all of the lottery tickets you're guaranteed to win, but when you win maybe you get 50% of your money back.
Play video starting at :3:24 and follow transcript3:24
So the expected rate of return on a lottery is basically -50% on a traditional lottery. And we know that the money supposedly goes to good cause many times, but that's beside the point. The point is, within this system we can run a fair lottery where the money is put into a smart contract, there's one winner that's drawn by random and all of that money is transferred to the winner. So again this is a good example of an NFT application. However, in the news there's many other uses and indeed NFTs can represent collectibles, so it's not just deeds. So deeds are important in finance. As I said a loan contract is like a deed but it could be something that's collectible, for example, ownership of a piece of art. So in the first course I actually mentioned art also and in a different application. So it might be that you've got some art and then you issue ERC-20 tokens where many people can own a piece of that art and potentially for investment purposes. So you think the art is going to go up in value. So you can't afford the fine art on your own, but you can't afford a share, and this would be like an equity share of that art. So for NFT it's different. So in NFT you actually would own the art, ao one owner of the ERC-20. And indeed people made a lot of press where basically one piece of art, the NFT sold for 69.3 million.
Play video starting at :5:33 and follow transcript5:33
But it's not just this, so there are so many other applications of NFT. So people are selling NFT on certain video clips, it could be music, it could be even a tweet that's sold as an NFT. So anything collectible is a possibility here. Indeed I believe that a very interesting application of all of this is in the gaming world, and there's a lot of untapped value, and a lot of people that are using games or that are gamers are very sophisticated also in terms of technology and it just seems a natural area to go. There is also something called ERC-1155. So one thing with the ERC-20 and the 721 they require an individual contract to be deployed on a blockchain. So if you've got many tokens this can be cumbersome, and ERC-1155 allows you to have a mixture of fungible and non-fungible token types.
Play video starting at :6:56 and follow transcript6:56
So this is important also for another reason and that is that there is a possibility of a multi-token model. So this is going to be important a little later on where we're thinking of investment, and investment pools, and liquidity pools, and this innovation is a good innovation.
